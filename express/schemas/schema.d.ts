/* eslint-disable @typescript-eslint/array-type */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/artists': {
    /** @description List available artists */
    get: operations['ListArtists']
    /** @description Create new artist */
    post: operations['CreateArtist']
  }
  '/artists/{id}': {
    /** @description Get artist details */
    get: operations['GetArtist']
    /** @description Update artist details */
    patch: operations['UpdateArtist']
    parameters: {
      path: {
        /** @description The unique identifier of the artist */
        id: components['schemas']['Id']
      }
    }
  }
  '/artists/{id}/review': {
    /** @description Create artist's performance review */
    post: operations['CreateReview']
    parameters: {
      path: {
        /** @description The unique identifier of the artist */
        id: components['schemas']['Id']
      }
    }
  }
  '/artists/{id}/follow': {
    /** @description Follow artist */
    post: operations['FollowArtist']
    /** @description Unfollow artist */
    delete: operations['UnfollowArtist']
    parameters: {
      path: {
        /** @description The unique identifier of the artist */
        id: components['schemas']['Id']
      }
    }
  }
  '/categories': {
    /** @description List available categories */
    get: operations['ListCategories']
  }
  '/cities': {
    /** @description List available cities */
    get: operations['ListCities']
  }
  '/events': {
    /** @description List approved events */
    get: operations['ListEvents']
    /** @description Create new event */
    post: operations['CreateEvent']
  }
  '/events/to-approve': {
    /** @description List events to approve */
    get: operations['ListEventsToApprove']
  }
  '/events/{id}': {
    /** @description Get event details */
    get: operations['GetEvent']
    /** @description Delete event */
    delete: operations['DeleteEvent']
    /** @description Update event details */
    patch: operations['UpdateEvent']
    parameters: {
      path: {
        /** @description The unique identifier of the event */
        id: components['schemas']['Id']
      }
    }
  }
  '/events/{id}/approve': {
    /** @description Approve event */
    post: operations['ApproveEvent']
    parameters: {
      path: {
        /** @description The unique identifier of the event */
        id: components['schemas']['Id']
      }
    }
  }
  '/events/{id}/like': {
    /** @description Like event */
    post: operations['LikeEvent']
    parameters: {
      path: {
        /** @description The unique identifier of the event */
        id: components['schemas']['Id']
      }
    }
  }
  '/events/{id}/tickets/verify': {
    /** @description Passive ticket verification */
    post: operations['PassiveTicketVerification']
    parameters: {
      path: {
        /** @description The unique identifier of the event */
        id: components['schemas']['Id']
      }
    }
  }
  '/events/{id}/tickets/subscribe': {
    /** @description Subscribe for active ticket verification, long polling - 15 seconds timeout */
    post: operations['ActiveTicketVerification']
    parameters: {
      path: {
        /** @description The unique identifier of the event */
        id: components['schemas']['Id']
      }
    }
  }
  '/events/{id}/tickets/{tokenId}': {
    /** @description Get token metadata */
    get: operations['GetToken']
    parameters: {
      path: {
        /** @description The unique identifier of the event */
        id: components['schemas']['Id']
        /** @description The unique identifier of the ticket token from NFT collection */
        tokenId: components['schemas']['TokenId']
      }
    }
  }
  '/uploads': {
    /** @description Create new upload */
    post: operations['CreateUpload']
  }
  '/users': {
    /** @description List available users */
    get: operations['ListUsers']
  }
  '/users/nonce': {
    /** @description Generate nonce for user with provided wallet address */
    post: operations['GenerateNonce']
  }
  '/users/sign-up': {
    /** @description Sign up user account */
    post: operations['SignUp']
  }
  '/users/activate': {
    /** @description Activate user account */
    post: operations['ActivateUser']
  }
  '/users/verify': {
    /** @description Sign in user */
    post: operations['SignIn']
  }
  '/users/refresh': {
    /** @description Refresh JWT tokens pair */
    post: operations['RefreshTokens']
  }
  '/users/{id}': {
    /** @description Update user role */
    patch: operations['UpdateUserRole']
    parameters: {
      path: {
        /** @description The unique identifier of the user */
        id: components['schemas']['Id']
      }
    }
  }
  '/users/me/events': {
    /** @description List events created by currently signed in user */
    get: operations['ListUserEvents']
  }
  '/users/me/events/tickets': {
    /** @description List tickets from events created by currently signed in user */
    get: operations['ListUserEventsTickets']
  }
  '/users/me/sales-report': {
    /** @description Get currently signed in user sales report details */
    get: operations['GetSalesReport']
  }
  '/users/me': {
    /** @description Get currently signed in user details */
    get: operations['GetMe']
    /** @description Update currently signed in user details */
    patch: operations['UpdateUser']
  }
  '/users/me/tickets': {
    /** @description List currently signed in user tickets */
    get: operations['ListUserTickets']
  }
  '/users/me/following': {
    /** @description Get currently signed in user followed artists */
    get: operations['ListUserFollowedArtists']
  }
  '/reviews/to-approve': {
    /** @description List reviews to approve */
    get: operations['ListReviewsToApprove']
  }
  '/reviews/{id}': {
    /** @description Delete review */
    delete: operations['DeleteReview']
    parameters: {
      path: {
        /** @description The unique identifier of the review */
        id: components['schemas']['Id']
      }
    }
  }
  '/reviews/{id}/approve': {
    /** @description Approve review */
    post: operations['ApproveReview']
    parameters: {
      path: {
        /** @description The unique identifier of the review */
        id: components['schemas']['Id']
      }
    }
  }
  '/tickets/approve': {
    /** @description Approve active ticket verification */
    post: operations['ApproveActiveTicketVerification']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    /** @description A listing page number */
    Page: number
    /** @description The unique identifier */
    Id: number
    /** @description The unique identifier of the token */
    TokenId: number
    /** @description Ethereum public address */
    PublicAddress: string
    /** @description Cryptographic nonce */
    Nonce: string
    /** @description JSON Web Token */
    JWT: string
    Name: string
    LongName: string
    Description: string
    Content: string
    /** Format: url */
    Url: string
    /** Format: email */
    Email: string
    /** @enum {string} */
    UploadType: 'FILE' | 'IMAGE'
    Tags: string
    /**
     * Format: ^\d+(.\d{1,2})?$
     * @description Price of ticket in Wei units
     */
    Price: string
    PostalCode: string
    /** Format: date */
    Date: string
    /** Format: date-time */
    DateTime: string
    Rate: number
    /** @description Version 4 UUID */
    UUID: string
    /** @enum {string} */
    UserRole: 'USER' | 'EVENTS_ORGANIZER' | 'ADMINISTRATOR'
    CreateArtist: {
      pictureIdUpload: components['schemas']['Id']
      name: components['schemas']['Name']
      description: components['schemas']['Description']
    }
    UpdateArtist: components['schemas']['CreateArtist']
    ListArtists: {
      idArtist: components['schemas']['Id']
      pictureUrl: components['schemas']['Url']
      name: components['schemas']['Name']
    }[]
    GetArtist: {
      idArtist: components['schemas']['Id']
      pictureUrl: components['schemas']['Url']
      name: components['schemas']['Name']
      description: components['schemas']['Description']
      /** @description List of events in which the artist will perform */
      events: components['schemas']['ListEvents']
      /** @description List of approved artist's performance reviews */
      reviews: components['schemas']['ListReviews']
    }
    ListCategories: {
      idCategory: components['schemas']['Id']
      name: components['schemas']['Name']
      subcategories: {
        idSubcategory: components['schemas']['Id']
        name: components['schemas']['Name']
      }[]
    }[]
    ListCities: {
      idCity: components['schemas']['Id']
      name: components['schemas']['Name']
    }[]
    CreateEvent: {
      idSubcategory: components['schemas']['Id']
      cityName: components['schemas']['Name']
      statuteIdUpload: null | components['schemas']['Id']
      nftImageIdUpload: null | components['schemas']['Id']
      name: components['schemas']['LongName']
      tags: components['schemas']['Tags']
      description: components['schemas']['Description']
      video: null | components['schemas']['Url']
      ticketPrice: components['schemas']['Price']
      ticketCount: number
      maxTicketsPerUser: number
      location: components['schemas']['LongName']
      street: components['schemas']['Name']
      postalCode: components['schemas']['PostalCode']
      start: components['schemas']['DateTime']
      publish: components['schemas']['DateTime']
      draft: boolean
      transferable: boolean
      /** @description First image is the main image of event */
      images: components['schemas']['Id'][]
      artists: components['schemas']['Id'][]
    }
    UpdateEvent: {
      idSubcategory: components['schemas']['Id']
      cityName: components['schemas']['Name']
      statuteIdUpload: null | components['schemas']['Id']
      nftImageIdUpload: null | components['schemas']['Id']
      tags: components['schemas']['Tags']
      description: components['schemas']['Description']
      video: null | components['schemas']['Url']
      location: components['schemas']['LongName']
      street: components['schemas']['Name']
      postalCode: components['schemas']['PostalCode']
      start: components['schemas']['DateTime']
      draft: boolean
      /** @description First image is the main image of event */
      images: components['schemas']['Id'][]
      artists: components['schemas']['Id'][]
    }
    ListEvents: {
      idEvent: components['schemas']['Id']
      creatorIdUser: components['schemas']['Id']
      creatorUsername: components['schemas']['Name']
      idSubcategory: components['schemas']['Id']
      subcategoryName: components['schemas']['Name']
      idCity: components['schemas']['Id']
      cityName: components['schemas']['Name']
      name: components['schemas']['LongName']
      ticketPrice: components['schemas']['Price']
      remainingTicketCount: number
      location: components['schemas']['LongName']
      start: components['schemas']['DateTime']
      draft?: boolean
      likes: number
      transferable: boolean
      created: components['schemas']['DateTime']
      image: null | components['schemas']['Url']
    }[]
    GetEvent: {
      idEvent: components['schemas']['Id']
      creatorIdUser: components['schemas']['Id']
      creatorUsername: components['schemas']['Name']
      idSubcategory: components['schemas']['Id']
      subcategoryName: components['schemas']['Name']
      idCity: components['schemas']['Id']
      cityName: components['schemas']['Name']
      statuteIdUpload: null | components['schemas']['Id']
      statuteUrl: null | components['schemas']['Url']
      nftImageIdUpload?: null | components['schemas']['Id']
      nftImageUrl?: null | components['schemas']['Url']
      name: components['schemas']['LongName']
      tags?: components['schemas']['Tags']
      description: components['schemas']['Description']
      contractAddress: null | components['schemas']['PublicAddress']
      video: null | components['schemas']['Url']
      ticketPrice: components['schemas']['Price']
      ticketCount?: number
      maxTicketsPerUser?: number
      remainingTicketCount: number
      remainingTicketsPerUser: number
      location: components['schemas']['LongName']
      street: components['schemas']['Name']
      postalCode: components['schemas']['PostalCode']
      start: components['schemas']['DateTime']
      publish?: components['schemas']['DateTime']
      draft?: boolean
      likes: number
      transferable: boolean
      created: components['schemas']['DateTime']
      images: {
        idUpload: components['schemas']['Id']
        url: components['schemas']['Url']
      }[]
      artists: components['schemas']['ListArtists']
    }
    TicketVerificationResult: {
      hasTicket: boolean
      isTicketUsed: null | boolean
      user: null | components['schemas']['GetUser']
    }
    GetToken: {
      name: components['schemas']['Name']
      description: components['schemas']['Description']
      image?: components['schemas']['Url']
      external_url: components['schemas']['Url']
      attributes: {
        display_type: string
        trait_type: string
        value: string | number
      }[]
    }
    CreateUpload: {
      /** Format: binary */
      file: string
      type: components['schemas']['UploadType']
    }
    GetUpload: {
      idUpload: components['schemas']['Id']
      /** Format: url */
      url: string
      type: components['schemas']['UploadType']
    }
    UpdateUserRole: {
      role: components['schemas']['UserRole']
    }
    UpdateUser: {
      name: components['schemas']['Name']
      surname: components['schemas']['Name']
      birthdate: components['schemas']['Date']
    }
    ListUsers: {
      idUser: components['schemas']['Id']
      publicAddress: components['schemas']['PublicAddress']
      email: components['schemas']['Email']
      username: components['schemas']['Name']
      role: components['schemas']['UserRole']
      active: boolean
      created: components['schemas']['DateTime']
    }[]
    GetUser: {
      idUser: components['schemas']['Id']
      publicAddress: components['schemas']['PublicAddress']
      email: components['schemas']['Email']
      username: components['schemas']['Name']
      name: components['schemas']['Name']
      surname: components['schemas']['Name']
      birthdate: components['schemas']['Date']
      role: components['schemas']['UserRole']
      created: components['schemas']['DateTime']
    }
    ListTickets: {
      idTicket: components['schemas']['Id']
      idEvent: components['schemas']['Id']
      eventName: components['schemas']['LongName']
      idUser: components['schemas']['Id']
      email: components['schemas']['Email']
      username: components['schemas']['Name']
      tokenId: components['schemas']['TokenId']
      ticketAddress: components['schemas']['PublicAddress']
      ticketPrice: components['schemas']['Price']
      ticketUsed: boolean
      created: components['schemas']['DateTime']
    }[]
    SalesReport: {
      /** @description Daily income for every day up to 30 days */
      dailyIncome: {
        idEvent: components['schemas']['Id']
        eventName: components['schemas']['Name']
        /** @description Calendar year, month and day - yyyy-MM-dd */
        date: string
        income: components['schemas']['Price']
        ticketCount: number
      }[]
      /** @description Monthly income for every month up to 12 months */
      monthlyIncome: {
        idEvent: components['schemas']['Id']
        eventName: components['schemas']['Name']
        /** @description Calendar year and month - yyyy-MM */
        date: string
        income: components['schemas']['Price']
        ticketCount: number
      }[]
      /** @description Annual income for every year up to 5 years */
      annualIncome: {
        idEvent: components['schemas']['Id']
        eventName: components['schemas']['Name']
        /** @description Calendar year - yyyy */
        date: string
        income: components['schemas']['Price']
        ticketCount: number
      }[]
      /** @description Ticket count by category including summary */
      ticketCountByCategory: {
        idCategory: null | components['schemas']['Id']
        categoryName: null | components['schemas']['Name']
        ticketCount: number
      }[]
    }
    ListUserTickets: {
      idTicket: components['schemas']['Id']
      idEvent: components['schemas']['Id']
      eventName: components['schemas']['LongName']
      tokenId: components['schemas']['TokenId']
      ticketAddress: components['schemas']['PublicAddress']
      ticketPrice: components['schemas']['Price']
      ticketUsed: boolean
      created: components['schemas']['DateTime']
    }[]
    CreateReview: {
      title: components['schemas']['Name']
      eventLocation: components['schemas']['LongName']
      eventDate: components['schemas']['Date']
      content: components['schemas']['Content']
      rate: components['schemas']['Rate']
    }
    ListReviews: {
      idReview: components['schemas']['Id']
      reviewerIdUser: components['schemas']['Id']
      reviewerUsername: components['schemas']['Name']
      reviewedIdArtist: components['schemas']['Id']
      reviewedName: components['schemas']['Name']
      title: components['schemas']['Name']
      eventLocation: components['schemas']['LongName']
      eventDate: components['schemas']['Date']
      content: components['schemas']['Content']
      rate: components['schemas']['Rate']
      created: components['schemas']['DateTime']
    }[]
    GetReview: {
      idReview: components['schemas']['Id']
      reviewerIdUser: components['schemas']['Id']
      reviewedIdArtist: components['schemas']['Id']
      title: components['schemas']['Name']
      eventLocation: components['schemas']['LongName']
      eventDate: components['schemas']['Date']
      content: components['schemas']['Content']
      rate: components['schemas']['Rate']
      created: components['schemas']['DateTime']
    }
    Error: {
      /** @description A human readable error message */
      message: string
    }
  }
  responses: {
    /** @description Invalid request contents */
    BadRequest: {
      content: {
        'application/json': components['schemas']['Error']
      }
    }
    /** @description Lack of or invalid authentication token */
    Unauthorized: {
      content: {
        'application/json': components['schemas']['Error']
      }
    }
    /** @description User is not permitted for this action */
    Forbidden: {
      content: {
        'application/json': components['schemas']['Error']
      }
    }
    /** @description Requested resource not found */
    NotFound: {
      content: {
        'application/json': components['schemas']['Error']
      }
    }
    /** @description Rate limit exceeded */
    TooManyRequests: {
      content: {
        'application/json': components['schemas']['Error']
      }
    }
    /** @description An internal server error has occured */
    InternalServerError: {
      content: {
        'application/json': components['schemas']['Error']
      }
    }
  }
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  /** @description List available artists */
  ListArtists: {
    parameters: {
      query?: {
        /** @description A string to search artists by name */
        search?: string
        /** @description A listing page number */
        page?: components['schemas']['Page']
      }
    }
    responses: {
      /** @description Available artists */
      200: {
        content: {
          'application/json': {
            count: number
            pages: number
            currentPage: number
            results: components['schemas']['ListArtists']
          }
        }
      }
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Create new artist */
  CreateArtist: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['CreateArtist']
      }
    }
    responses: {
      /** @description Created artist details */
      201: {
        content: {
          'application/json': components['schemas']['GetArtist']
        }
      }
      400: components['responses']['BadRequest']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Get artist details */
  GetArtist: {
    parameters: {
      path: {
        /** @description The unique identifier of the artist */
        id: components['schemas']['Id']
      }
    }
    responses: {
      /** @description Artist details */
      200: {
        content: {
          'application/json': components['schemas']['GetArtist']
        }
      }
      404: components['responses']['NotFound']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Update artist details */
  UpdateArtist: {
    parameters: {
      path: {
        /** @description The unique identifier of the artist */
        id: components['schemas']['Id']
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['UpdateArtist']
      }
    }
    responses: {
      /** @description Artist updated details */
      200: {
        content: {
          'application/json': components['schemas']['GetArtist']
        }
      }
      400: components['responses']['BadRequest']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Create artist's performance review */
  CreateReview: {
    parameters: {
      path: {
        /** @description The unique identifier of the artist */
        id: components['schemas']['Id']
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['CreateReview']
      }
    }
    responses: {
      /** @description Created review details */
      201: {
        content: {
          'application/json': components['schemas']['GetReview']
        }
      }
      400: components['responses']['BadRequest']
      401: components['responses']['Unauthorized']
      429: components['responses']['TooManyRequests']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Follow artist */
  FollowArtist: {
    parameters: {
      path: {
        /** @description The unique identifier of the artist */
        id: components['schemas']['Id']
      }
    }
    responses: {
      /** @description Successfully followed artist */
      204: {
        content: never
      }
      400: components['responses']['BadRequest']
      401: components['responses']['Unauthorized']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Unfollow artist */
  UnfollowArtist: {
    parameters: {
      path: {
        /** @description The unique identifier of the artist */
        id: components['schemas']['Id']
      }
    }
    responses: {
      /** @description Successfully unfollowed artist */
      204: {
        content: never
      }
      400: components['responses']['BadRequest']
      401: components['responses']['Unauthorized']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description List available categories */
  ListCategories: {
    responses: {
      /** @description Available categories */
      200: {
        content: {
          'application/json': components['schemas']['ListCategories']
        }
      }
      default: components['responses']['InternalServerError']
    }
  }
  /** @description List available cities */
  ListCities: {
    responses: {
      /** @description Available cities */
      200: {
        content: {
          'application/json': components['schemas']['ListCities']
        }
      }
      default: components['responses']['InternalServerError']
    }
  }
  /** @description List approved events */
  ListEvents: {
    parameters: {
      query?: {
        /** @description A string to search event by name, tags and description */
        search?: string
        /** @description The unique identifier of the subcategory */
        idSubcategory?: components['schemas']['Id']
        /** @description The unique identifier of the city */
        idCity?: components['schemas']['Id']
        /** @description Specifies sort condition */
        sort?:
          | 'NEWEST'
          | 'LOWEST_PRICE'
          | 'HIGHEST_PRICE'
          | 'MOST_LIKES'
          | 'STARTING_SOON'
        /** @description A listing page number */
        page?: components['schemas']['Page']
      }
    }
    responses: {
      /** @description List of approved events */
      200: {
        content: {
          'application/json': {
            count: number
            pages: number
            currentPage: number
            results: components['schemas']['ListEvents']
          }
        }
      }
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Create new event */
  CreateEvent: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['CreateEvent']
      }
    }
    responses: {
      /** @description Created event details */
      201: {
        content: {
          'application/json': components['schemas']['GetEvent']
        }
      }
      400: components['responses']['BadRequest']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      429: components['responses']['TooManyRequests']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description List events to approve */
  ListEventsToApprove: {
    parameters: {
      query?: {
        /** @description A listing page number */
        page?: components['schemas']['Page']
      }
    }
    responses: {
      /** @description Events to approve */
      200: {
        content: {
          'application/json': {
            count: number
            pages: number
            currentPage: number
            results: components['schemas']['ListEvents']
          }
        }
      }
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Get event details */
  GetEvent: {
    parameters: {
      path: {
        /** @description The unique identifier of the event */
        id: components['schemas']['Id']
      }
    }
    responses: {
      /** @description Event details */
      200: {
        content: {
          'application/json': components['schemas']['GetEvent']
        }
      }
      404: components['responses']['NotFound']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Delete event */
  DeleteEvent: {
    parameters: {
      path: {
        /** @description The unique identifier of the event */
        id: components['schemas']['Id']
      }
    }
    responses: {
      /** @description Successfully deleted event */
      204: {
        content: never
      }
      400: components['responses']['BadRequest']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Update event details */
  UpdateEvent: {
    parameters: {
      path: {
        /** @description The unique identifier of the event */
        id: components['schemas']['Id']
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['UpdateEvent']
      }
    }
    responses: {
      /** @description Event updated details */
      200: {
        content: {
          'application/json': components['schemas']['GetEvent']
        }
      }
      400: components['responses']['BadRequest']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Approve event */
  ApproveEvent: {
    parameters: {
      path: {
        /** @description The unique identifier of the event */
        id: components['schemas']['Id']
      }
    }
    responses: {
      /** @description Successfully approved event */
      204: {
        content: never
      }
      400: components['responses']['BadRequest']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Like event */
  LikeEvent: {
    parameters: {
      path: {
        /** @description The unique identifier of the event */
        id: components['schemas']['Id']
      }
    }
    responses: {
      /** @description Successfully liked event */
      204: {
        content: never
      }
      400: components['responses']['BadRequest']
      429: components['responses']['TooManyRequests']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Passive ticket verification */
  PassiveTicketVerification: {
    parameters: {
      path: {
        /** @description The unique identifier of the event */
        id: components['schemas']['Id']
      }
    }
    requestBody?: {
      content: {
        'application/json': {
          publicAddress: components['schemas']['PublicAddress']
        }
      }
    }
    responses: {
      /** @description Passive ticket verification result */
      200: {
        content: {
          'application/json': components['schemas']['TicketVerificationResult']
        }
      }
      400: components['responses']['BadRequest']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Subscribe for active ticket verification, long polling - 15 seconds timeout */
  ActiveTicketVerification: {
    parameters: {
      path: {
        /** @description The unique identifier of the event */
        id: components['schemas']['Id']
      }
    }
    requestBody?: {
      content: {
        'application/json': {
          uuid: components['schemas']['UUID']
        }
      }
    }
    responses: {
      /** @description Active ticket verification result */
      200: {
        content: {
          'application/json': components['schemas']['TicketVerificationResult']
        }
      }
      /** @description Long polling timeout has passed */
      204: {
        content: never
      }
      400: components['responses']['BadRequest']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Get token metadata */
  GetToken: {
    parameters: {
      path: {
        /** @description The unique identifier of the event */
        id: components['schemas']['Id']
        /** @description The unique identifier of the ticket token from NFT collection */
        tokenId: components['schemas']['TokenId']
      }
    }
    responses: {
      /** @description Event details */
      200: {
        content: {
          'application/json': components['schemas']['GetToken']
        }
      }
      404: components['responses']['NotFound']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Create new upload */
  CreateUpload: {
    requestBody?: {
      content: {
        'multipart/form-data': components['schemas']['CreateUpload']
      }
    }
    responses: {
      /** @description Created upload details */
      201: {
        content: {
          'application/json': components['schemas']['GetUpload']
        }
      }
      400: components['responses']['BadRequest']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      429: components['responses']['TooManyRequests']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description List available users */
  ListUsers: {
    parameters: {
      query?: {
        /** @description A string to search user by username */
        search?: string
        /** @description A listing page number */
        page?: components['schemas']['Page']
      }
    }
    responses: {
      /** @description Available users */
      200: {
        content: {
          'application/json': {
            count: number
            pages: number
            currentPage: number
            results: components['schemas']['ListUsers']
          }
        }
      }
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Generate nonce for user with provided wallet address */
  GenerateNonce: {
    requestBody?: {
      content: {
        'application/json': {
          publicAddress: components['schemas']['PublicAddress']
        }
      }
    }
    responses: {
      /** @description User nonce */
      200: {
        content: {
          'application/json': {
            nonce: components['schemas']['Nonce']
          }
        }
      }
      400: components['responses']['BadRequest']
      /** @description User not found, return sign up token */
      404: {
        content: {
          'application/json': {
            signUpToken: components['schemas']['JWT']
          }
        }
      }
      429: components['responses']['TooManyRequests']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Sign up user account */
  SignUp: {
    requestBody?: {
      content: {
        'application/json': {
          signUpToken: components['schemas']['JWT']
          email: components['schemas']['Email']
          username: components['schemas']['Name']
          name: components['schemas']['Name']
          surname: components['schemas']['Name']
          birthdate: components['schemas']['Date']
        }
      }
    }
    responses: {
      /** @description Successfully signed up user account */
      204: {
        content: never
      }
      400: components['responses']['BadRequest']
      429: components['responses']['TooManyRequests']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Activate user account */
  ActivateUser: {
    requestBody?: {
      content: {
        'application/json': {
          activationToken: components['schemas']['JWT']
        }
      }
    }
    responses: {
      /** @description Successfully activated user account */
      204: {
        content: never
      }
      400: components['responses']['BadRequest']
      429: components['responses']['TooManyRequests']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Sign in user */
  SignIn: {
    requestBody?: {
      content: {
        'application/json': {
          message: string
          /** @description ECDSA private key signature of message */
          signature: string
        }
      }
    }
    responses: {
      /** @description JWT tokens pair */
      200: {
        content: {
          'application/json': {
            authenticationToken: components['schemas']['JWT']
            refreshToken: components['schemas']['JWT']
          }
        }
      }
      400: components['responses']['BadRequest']
      429: components['responses']['TooManyRequests']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Refresh JWT tokens pair */
  RefreshTokens: {
    requestBody?: {
      content: {
        'application/json': {
          refreshToken: components['schemas']['JWT']
        }
      }
    }
    responses: {
      /** @description JWT tokens pair */
      200: {
        content: {
          'application/json': {
            authenticationToken: components['schemas']['JWT']
            refreshToken: components['schemas']['JWT']
          }
        }
      }
      400: components['responses']['BadRequest']
      429: components['responses']['TooManyRequests']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Update user role */
  UpdateUserRole: {
    parameters: {
      path: {
        /** @description The unique identifier of the user */
        id: components['schemas']['Id']
      }
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['UpdateUserRole']
      }
    }
    responses: {
      /** @description Updated user details */
      200: {
        content: {
          'application/json': components['schemas']['GetUser']
        }
      }
      400: components['responses']['BadRequest']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description List events created by currently signed in user */
  ListUserEvents: {
    parameters: {
      query?: {
        /** @description A string to search event by name, tags and description */
        search?: string
        /** @description The unique identifier of the subcategory */
        idSubcategory?: components['schemas']['Id']
        /** @description The unique identifier of the city */
        idCity?: components['schemas']['Id']
        /** @description A listing page number */
        page?: components['schemas']['Page']
      }
    }
    responses: {
      /** @description List of events */
      200: {
        content: {
          'application/json': {
            count: number
            pages: number
            currentPage: number
            results: components['schemas']['ListEvents']
          }
        }
      }
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description List tickets from events created by currently signed in user */
  ListUserEventsTickets: {
    responses: {
      /** @description List of tickets */
      200: {
        content: {
          'application/json': components['schemas']['ListTickets']
        }
      }
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Get currently signed in user sales report details */
  GetSalesReport: {
    responses: {
      /** @description Sales report details */
      200: {
        content: {
          'application/json': components['schemas']['SalesReport']
        }
      }
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Get currently signed in user details */
  GetMe: {
    responses: {
      /** @description User details */
      200: {
        content: {
          'application/json': components['schemas']['GetUser']
        }
      }
      401: components['responses']['Unauthorized']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Update currently signed in user details */
  UpdateUser: {
    requestBody?: {
      content: {
        'application/json': components['schemas']['UpdateUser']
      }
    }
    responses: {
      /** @description User updated details */
      200: {
        content: {
          'application/json': components['schemas']['GetUser']
        }
      }
      400: components['responses']['BadRequest']
      401: components['responses']['Unauthorized']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description List currently signed in user tickets */
  ListUserTickets: {
    responses: {
      /** @description User tickets */
      200: {
        content: {
          'application/json': components['schemas']['ListUserTickets']
        }
      }
      401: components['responses']['Unauthorized']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Get currently signed in user followed artists */
  ListUserFollowedArtists: {
    responses: {
      /** @description User followed artists */
      200: {
        content: {
          'application/json': components['schemas']['ListArtists']
        }
      }
      401: components['responses']['Unauthorized']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description List reviews to approve */
  ListReviewsToApprove: {
    parameters: {
      query?: {
        /** @description A listing page number */
        page?: components['schemas']['Page']
      }
    }
    responses: {
      /** @description Reviews to approve */
      200: {
        content: {
          'application/json': {
            count: number
            pages: number
            currentPage: number
            results: components['schemas']['ListReviews']
          }
        }
      }
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Delete review */
  DeleteReview: {
    parameters: {
      path: {
        /** @description The unique identifier of the review */
        id: components['schemas']['Id']
      }
    }
    responses: {
      /** @description Successfully deleted review */
      204: {
        content: never
      }
      400: components['responses']['BadRequest']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Approve review */
  ApproveReview: {
    parameters: {
      path: {
        /** @description The unique identifier of the review */
        id: components['schemas']['Id']
      }
    }
    responses: {
      /** @description Successfully approved review */
      204: {
        content: never
      }
      400: components['responses']['BadRequest']
      401: components['responses']['Unauthorized']
      403: components['responses']['Forbidden']
      default: components['responses']['InternalServerError']
    }
  }
  /** @description Approve active ticket verification */
  ApproveActiveTicketVerification: {
    requestBody?: {
      content: {
        'application/json': {
          uuid: components['schemas']['UUID']
          /** @description ECDSA private key signature of uuid */
          signature: string
        }
      }
    }
    responses: {
      /** @description Successfully approved ticket verification */
      204: {
        content: never
      }
      400: components['responses']['BadRequest']
      429: components['responses']['TooManyRequests']
      default: components['responses']['InternalServerError']
    }
  }
}
